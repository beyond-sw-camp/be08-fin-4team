version: 0.2

phases:
  install:
    runtime-versions:
      docker: 20

  pre_build:
    commands:
      # AWS ECR 로그인
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

      # 설정 파일 디렉토리 생성
      - mkdir -p src/main/resources

      # Parameter Store에서 설정 가져오기
      - echo Fetching configuration from Parameter Store...
      - aws ssm get-parameter --name "/easystay/backend/application.yml" --query Parameter.Value --output text > src/main/resources/application.yml
      - aws ssm get-parameter --name "/easystay/backend/application-dev.yml" --query Parameter.Value --output text > src/main/resources/application-dev.yml

      # 파일 존재 및 내용 확인
      - echo "=== Checking config files ==="
      - ls -la src/main/resources/
      - echo "=== Content of application.yml ==="
      - cat src/main/resources/application.yml
      - echo "=== Content of application-dev.yml ==="
      - cat src/main/resources/application-dev.yml

      # 이미지 태그 설정
      - IMAGE_TAG=v${CODEBUILD_BUILD_NUMBER}
      - echo "Building version": $IMAGE_TAG
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME

  build:
    commands:
      # Docker 이미지 빌드
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:$IMAGE_TAG .
      - docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:latest

  post_build:
    commands:
    # 나머지 post_build 명령어들...

artifacts:
  files:
    - imageDefinitions.json
  discard-paths: yes

cache:
  paths:
    - '/root/.gradle/caches/**/*'
    - '/root/.gradle/wrapper/**/*'