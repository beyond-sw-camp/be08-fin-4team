version: 0.2

phases:
  install:
    runtime-versions:
      docker: 20

  pre_build:
    commands:
      # AWS 계정 로그인
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      # application.yml 파일 가져오기
      - echo Fetching configuration files from CodeCommit...
      - mkdir -p src/main/resources
      - aws codecommit get-file --repository-name $YOUR_REPO_NAME --file-path application.yml --output text --query fileContent > src/main/resources/application.yml
      - aws codecommit get-file --repository-name $YOUR_REPO_NAME --file-path application-dev.yml --output text --query fileContent > src/main/resources/application-dev.yml
      # 이미지 태그 설정
      - echo Setting image tag...
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPOSITORY_NAME

  build:
    commands:
      # Docker 이미지 빌드
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:$IMAGE_TAG .
      - docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:latest

  post_build:
    commands:
      # ECR에 이미지 푸시
      - echo Pushing the Docker image...
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest

      # 현재 작동 중인 태스크 정의를 가져와서 taskdef.json 생성
      - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $ECS_TASK_FAMILY --region $AWS_DEFAULT_REGION)
      - echo $TASK_DEFINITION | jq -r .taskDefinition > taskdef.json

      # appspec.yaml 생성 - ECS 서비스 정보 기반
      - |
        cat << EOF > appspec.yaml
        version: 0.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: <TASK_DEFINITION>
                LoadBalancerInfo:
                  ContainerName: "easystay-backend-springboot"
                  ContainerPort: 30010
                PlatformVersion: "LATEST"
                NetworkConfiguration:
                  AwsvpcConfiguration:
                    Subnets: ["subnet-08c44b227b19f5cf3"]
                    SecurityGroups: ["sg-xxxxx"]
                    AssignPublicIp: "ENABLED"
                DesiredCount: 1
        EOF

      # 이미지 정의 파일 생성
      - echo Writing image definitions file...
      - printf '{"ImageURI":"%s"}' $REPOSITORY_URI:$IMAGE_TAG > imageDefinitions.json

      # 파일 생성 확인
      - echo Verifying artifact files...
      - ls -la
      - echo "=== imageDefinitions.json ==="
      - cat imageDefinitions.json
      - echo "=== appspec.yaml ==="
      - cat appspec.yaml
      - echo "=== taskdef.json ==="
      - cat taskdef.json
      - echo Build completed on `date`

artifacts:
  files:
    - imageDefinitions.json
    - appspec.yaml
    - taskdef.json
  name: BuildArtifact
  base-directory: .
  discard-paths: yes